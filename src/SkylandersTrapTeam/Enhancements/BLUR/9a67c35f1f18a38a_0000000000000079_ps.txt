#version 430
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader %08x%08x
// start of shader inputs/outputs, predetermined by Cemu. Do not touch
#ifdef VULKAN
#define ATTR_LAYOUT(__vkSet, __location) layout(set = __vkSet, location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation, std140)
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(set = __vkSet, binding = __vkLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale.xy,gl_FragCoord.zw)
#else
#define ATTR_LAYOUT(__vkSet, __location) layout(location = __location)
#define UNIFORM_BUFFER_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation, std140) 
#define TEXTURE_LAYOUT(__glLocation, __vkSet, __vkLocation) layout(binding = __glLocation)
#define GET_FRAGCOORD() vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw)
#endif
#ifdef VULKAN
layout(set = 1, binding = 1) uniform ufBlock
{
uniform ivec4 uf_remappedPS[5];
uniform vec4 uf_fragCoordScale;
};
#else
uniform ivec4 uf_remappedPS[5];
uniform vec2 uf_fragCoordScale;
#endif
TEXTURE_LAYOUT(0, 1, 0) uniform sampler2D textureUnitPS0;
layout(location = 0) in vec4 passParameterSem133;
layout(location = 1) in vec4 passParameterSem134;
layout(location = 0) out vec4 passPixelColor0;
// end of shader inputs/outputs
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem133);
R1i = floatBitsToInt(passParameterSem134);
if( activeMaskStackC[1] == true ) {
R2i.x = floatBitsToInt(textureLod(textureUnitPS0, intBitsToFloat(R1i.zy),0.0).w);
R4i.x = floatBitsToInt(textureLod(textureUnitPS0, intBitsToFloat(R1i.xy),0.0).w);
R3i.x = floatBitsToInt(textureLod(textureUnitPS0, intBitsToFloat(R1i.xw),0.0).w);
R1i.x = floatBitsToInt(textureLod(textureUnitPS0, intBitsToFloat(R1i.zw),0.0).w);
R5i.xyzw = floatBitsToInt(textureLod(textureUnitPS0, intBitsToFloat(R0i.xy),0.0).xyzw);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R127i.x = floatBitsToInt(min(intBitsToFloat(R4i.x), intBitsToFloat(R3i.x)));
PV0i.y = floatBitsToInt(intBitsToFloat(R2i.x) + intBitsToFloat(0x3b2aaaab));
R127i.w = floatBitsToInt(max(intBitsToFloat(R4i.x), intBitsToFloat(R3i.x)));
// 1
backupReg0i = R1i.x;
backupReg0i = R1i.x;
backupReg0i = R1i.x;
R1i.x = floatBitsToInt(-(intBitsToFloat(R4i.x)) + intBitsToFloat(backupReg0i));
PV1i.y = floatBitsToInt(min(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.y)));
PV1i.w = floatBitsToInt(max(intBitsToFloat(backupReg0i), intBitsToFloat(PV0i.y)));
R0i.w = floatBitsToInt(intBitsToFloat(R3i.x) + -(intBitsToFloat(PV0i.y)));
PS1i = R0i.w;
// 2
R4i.z = floatBitsToInt(max(intBitsToFloat(R127i.w), intBitsToFloat(PV1i.w)));
PV0i.z = R4i.z;
R6i.z = floatBitsToInt(min(intBitsToFloat(R127i.x), intBitsToFloat(PV1i.y)));
PS0i = R6i.z;
// 3
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_remappedPS[0].x)));
PV1i.y = floatBitsToInt(max(intBitsToFloat(R5i.w), intBitsToFloat(PV0i.z)));
PV1i.z = floatBitsToInt(min(intBitsToFloat(R5i.w), intBitsToFloat(PS0i)));
// 4
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(PV1i.y));
PV0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.x), intBitsToFloat(uf_remappedPS[1].x)));
// 5
PV1i.x = ((intBitsToFloat(PV0i.w) > intBitsToFloat(PV0i.z))?int(0xFFFFFFFF):int(0x0));
// 6
R2i.x = ((PV1i.x == 0)?(0):(R5i.x));
R1i.y = ((PV1i.x == 0)?(0):(0x3f800000));
R2i.z = ((PV1i.x == 0)?(0):(R5i.z));
R2i.w = ((PV1i.x == 0)?(0):(R5i.w));
R2i.y = ((PV1i.x == 0)?(0):(R5i.y));
PS0i = R2i.y;
// 7
predResult = (R1i.y == 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.x = floatBitsToInt(intBitsToFloat(R0i.w) + intBitsToFloat(R1i.x));
PV0i.x = R127i.x;
R127i.y = floatBitsToInt(intBitsToFloat(R0i.w) + -(intBitsToFloat(R1i.x)));
PV0i.y = R127i.y;
PV0i.z = 0;
// 4
PV0i.x = floatBitsToInt(max(intBitsToFloat(PV1i.z), -(intBitsToFloat(PV1i.z))));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(uf_remappedPS[2].z)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(uf_remappedPS[2].w)));
PV0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.y), -(intBitsToFloat(PV1i.y))));
// 5
R1i.x = floatBitsToInt(intBitsToFloat(R0i.x) + -(intBitsToFloat(PV0i.y)));
R1i.y = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(PV0i.z)));
PV1i.z = floatBitsToInt(min(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.w)));
R2i.w = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(PV0i.y));
R2i.y = floatBitsToInt(intBitsToFloat(R0i.y) + intBitsToFloat(PV0i.z));
PS1i = R2i.y;
R0i.xyz = floatBitsToInt(vec3(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg0i)) + vec3(-(intBitsToFloat(PV1i.w)),-(intBitsToFloat(PV1i.z)),intBitsToFloat(PV1i.w)));
R0i.w = floatBitsToInt(intBitsToFloat(backupReg1i) + intBitsToFloat(PV1i.z));
}
if( activeMaskStackC[2] == true ) {
R3i.xyzw = floatBitsToInt(textureLod(textureUnitPS0, intBitsToFloat(R0i.xy),0.0).xyzw);
R0i.xyzw = floatBitsToInt(textureLod(textureUnitPS0, intBitsToFloat(R0i.zw),0.0).xyzw);
R1i.xyzw = floatBitsToInt(textureLod(textureUnitPS0, intBitsToFloat(R1i.xy),0.0).xyzw);
R2i.xyzw = floatBitsToInt(textureLod(textureUnitPS0, intBitsToFloat(R2i.wy),0.0).xyzw);
}
if( activeMaskStackC[2] == true ) {
// 0
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
// export
passPixelColor0 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
}
